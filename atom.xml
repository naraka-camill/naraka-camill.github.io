<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Camill</title>
  
  
  <link href="https://camill.love/atom.xml" rel="self"/>
  
  <link href="https://camill.love/"/>
  <updated>2024-01-17T13:42:25.499Z</updated>
  <id>https://camill.love/</id>
  
  <author>
    <name>Camill</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>建站初衷</title>
    <link href="https://camill.love/home/talk-you/"/>
    <id>https://camill.love/home/talk-you/</id>
    <published>2024-01-17T10:16:00.000Z</published>
    <updated>2024-01-17T13:42:25.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建站初衷"><a href="#建站初衷" class="headerlink" title="建站初衷"></a>建站初衷</h1><p>搭建这么一个博客有何作用？</p><p>只是为了在像宇宙般浩瀚的互联网上留下一点属于自己的足迹？</p><p>也许不会有多少人进入到这个博客，也许这个博客不会传播多少有用的知识。</p><p>但是我还是想在这片浩瀚之地，划出属于自己的一块乌托邦之地。</p><p>写完一篇文章，部署后再自己反复观看，我觉得这是一种很愉悦的事情。</p><p>在不知不觉中，你就会写下很多篇博文，可能只是记录生活，亦或者是教程。</p><p>但这些都是美好的回忆，在五年十年后，再回过头来看这些自己曾经留下的足迹。</p><p>这也是一件美好的事情。</p><p>希望屏幕前的你，</p><p>能从这个地方，</p><p>收获到什么吧！</p>]]></content>
    
    
    <summary type="html">搭建这么一个博客有何作用？只是为了在像宇宙般浩瀚的互联网上留下一点属于自己的足迹？也许不会有多少人进入到这个博客，也许这个博客不会传播多少有用的知识，但是我还是想在这片浩瀚之地，划出属于自己的一块乌托邦之地。写完一篇文章，部署后再自己反复观看，我觉得这是一种很愉悦的事情。在不知不觉中，你就会写下很多篇博文，可能只是记录生活，亦或者是教程，但这些都是美好的回忆，在五年十年后，再回过头来看这些自己曾经留下的足迹，这也是一件美好的事情。希望屏幕前的你，能从这个地方，收获到什么吧！</summary>
    
    
    
    <category term="关于本站" scheme="https://camill.love/categories/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99/"/>
    
    
    <category term="Camill" scheme="https://camill.love/tags/Camill/"/>
    
    <category term="博客" scheme="https://camill.love/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="说明" scheme="https://camill.love/tags/%E8%AF%B4%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>vercel使用说明</title>
    <link href="https://camill.love/getting-started/vercel/"/>
    <id>https://camill.love/getting-started/vercel/</id>
    <published>2024-01-16T15:32:44.000Z</published>
    <updated>2024-01-17T13:42:25.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vercel使用"><a href="#vercel使用" class="headerlink" title="vercel使用"></a>vercel使用</h1><p><code>Vercel</code> 是一个云服务平台，支持静态网站（纯静态页面，没有接口数据交互）和动态网站的应用部署、预览和上线。  </p><p>如果你用过 GitHub Pages ，那么心里可能不会太陌生，但你也能通过 vercel 集成 GitHub 后，在 GitHub 项目进行代码推送，PR 合并自动部署的目的，且你不需要考虑服务器问题。</p><p>与其说这是 vercel 可行性调研方案，不如说是 vercel 用法普及，因为 vercel 自身内置 CI CD，只要你将项目与 vercel 关联，你就能通过命令快速部署，这没什么难度。  </p><p>接下来给大家讲解 vercel 优势、部署方式、能力边界以及接下来工作可能要思考的点。</p><h2 id="为什么我要使用-Vercel"><a href="#为什么我要使用-Vercel" class="headerlink" title="为什么我要使用 Vercel"></a>为什么我要使用 <code>Vercel</code></h2><ul><li>个人版永久免费，每个月 100G 带宽（别人访问你的项目所耗费的流量）个人项目部署完全够用，需要注意的是团队模式收费，所以要协作你只能付费。</li><li>内置 CI CD，你可以理解成一个黑盒，项目丢进去，只需要将项目导入 vercel ，一句命令自动部署。</li><li>因为内置构建流程，支持代码推送、PR 自动触发构建，不同分支唯一地址，方便测试。</li><li>支持本地、测试、生产三种环境部署，仅仅是命令区别，上手成本极低。</li><li>丰富的集成能力，项目部署自动监控，端到端自动化测试等等，当然这些并并属于 vercel 自身的能力，但它可以为你提供集成入口，让这些成为你自动部署中自动进行的一步，比如构建生产后自动完成性能指标输出，自动化测试，以及后续项目监控等等。</li></ul><h2 id="如何部署"><a href="#如何部署" class="headerlink" title="如何部署"></a>如何部署</h2><h2 id="导入Github-源码"><a href="#导入Github-源码" class="headerlink" title="导入Github 源码"></a>导入Github 源码</h2><blockquote><p>注意Github源码是指生成 <code>hexo g</code> 之前的那个源码，而不是 <code>hexo d</code> 之后，使用 <code>hexo d</code> 而 <code>push</code> 的编译后的 <code>html</code> 静态文件。</p></blockquote><p>在 dashboard 点击 Add New 按钮选择 Project，这时会跳转到导入项目界面，选择你的 GitHub 账号（如果之前没绑定这里也可以绑定 GitHub 账号），然后点击导入按钮，这是会跳转到项目设置。<br><img src="https://s11.ax1x.com/2024/01/17/pFFq7jO.png"></p><p>选择仓库，一般你要设置这个仓库为私有的</p><p><img src="https://s11.ax1x.com/2024/01/17/pFFLiDg.png"></p><p>接下来就是取名，选择框架</p><p><img src="https://s11.ax1x.com/2024/01/17/pFFLV5n.png"></p><p>然后其他默认即可，直接点击 <code>Deploy</code> 部署</p><p><img src="https://s11.ax1x.com/2024/01/17/pFFLeCq.png"></p><p>坐等构建就能看到 <code>vercel</code> 为我们部署后独一无二的预览地址了。</p><h2 id="如何更新部署"><a href="#如何更新部署" class="headerlink" title="如何更新部署"></a>如何更新部署</h2><p>由于实际开发，我们本地肯定也会克隆 GitHub 项目，那么在后续只要我们修改项目代码，push 到仓库，GitHub 感知到代码变动，vercel 就会自动再次部署。</p><p>你可能会想，我 GitHub 项目拷贝下来会有主分支，以及我的开发分支，vercel 虽然能自动部署，它怎么知道我要部署到什么环境，事实上 vercel 也已经做了提前预设，假设你的代码变动发生在 main 或者 master 分支，那么 vercel 就会自动构建部署生产环境，除此之外的分支，vercel 都会更新预览（测试）环境。</p><p>关于 GitHub 主分支，你可以在 GitHub 进行设置，这个 vercel 无需感知，反正是主分支变动它会对应帮你部署就完事了。</p><p>另外，让远程仓库代码变动有两种方式，第一种是直接本地推送代码，第二种就是提 PR 后合并到目标分支触发变动。</p><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><p>本地部署就很简单了，按照我之前写的<a href="../hello-hexo"> Hexo快速上手指南 </a>提供的说明和参考链接就行</p><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>这里选择<a href="https://wanwang.aliyun.com/domain/tld"> 阿里云域名 </a>，选择你喜欢的后缀，搭建你属于自己的网站吧</p><p><img src="https://s11.ax1x.com/2024/01/17/pFFLgRP.png"></p><p><img src="https://s11.ax1x.com/2024/01/17/pFFLfsS.png"></p><p>通过阅读<a href="https://vercel.com/docs/getting-started-with-vercel/domains"> vercel官方文档 </a>的域名使用手册来自定义你的域名就可以了！</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://vercel.com/"> Vercel </a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://zhuanlan.zhihu.com/p/641263373">快速上手 vercel，手把手教你白嫖部署上线你的个人项目</a></p><p><a href="https://vercel.com/docs/getting-started-with-vercel/domains"> vercel官方文档 </a></p>]]></content>
    
    
    <summary type="html">Vercel 是一个云服务平台，支持静态网站（纯静态页面，没有接口数据交互）和动态网站的应用部署、预览和上线。</summary>
    
    
    
    <category term="快速上手" scheme="https://camill.love/categories/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    
    
    <category term="部署" scheme="https://camill.love/tags/%E9%83%A8%E7%BD%B2/"/>
    
    <category term="vercel" scheme="https://camill.love/tags/vercel/"/>
    
  </entry>
  
  <entry>
    <title>Linux 常用命令</title>
    <link href="https://camill.love/note/linux-note/"/>
    <id>https://camill.love/note/linux-note/</id>
    <published>2024-01-14T15:18:00.000Z</published>
    <updated>2024-01-17T13:42:25.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-常用命令"><a href="#Linux-常用命令" class="headerlink" title="Linux 常用命令"></a>Linux 常用命令</h1><p>为什么要学 Linux 命令？  </p><p>这个问题值得一讨：</p><p>在撰写本文时，Linux在台式机上的全球市场份额为2.68%，但超过90%的云基础设施和托管服务都在该操作系统中运行。仅出于这个原因，熟悉流行的Linux命令就至关重要。</p><p>Linux 的核心重点从来都不是它的用户界面。它的设计初衷是让你通过命令行完全控制操作系统。这可能会让 Linux 初学者望而生畏–而成千上万的可用命令只会让这一切变得更加困难。</p><h2 id="什么是Linux命令？"><a href="#什么是Linux命令？" class="headerlink" title="什么是Linux命令？"></a>什么是Linux命令？</h2><p>Linux命令是在命令行上运行的程序或实用程序。命令行是一个界面，它接受文本行并将其处理为计算机的指令。</p><p>任何图形用户界面（GUI）都只是命令行程序的抽象。例如，当您通过单击“X”关闭窗口时，该操作后面会运行一个命令。</p><h2 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h2><p>在开始使用最常用的Linux命令之前，请确保启动终端（terminal）。在大多数Linux发行版中，您可以使用 <code>Ctrl + Alt + T</code> 来执行此操作。如果这不起作用，请在应用程序面板中搜索 <code>terminal</code></p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="ls-–-列出目录内容"><a href="#ls-–-列出目录内容" class="headerlink" title="ls – 列出目录内容"></a>ls – 列出目录内容</h3><p> <code>ls</code> 可能是每个Linux用户在其终端中键入的第一个命令。它允许您列出您想要的目录的内容（默认情况下是当前目录），包括文件和其他嵌套目录。</p><p>它有很多选择，所以最好使用 <code>--help</code> 来获得一些帮助。此标志返回所有可以与 <code>ls</code> 一起使用的flags参数。</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> [options] [directory]<br></code></pre></td></tr></table></figure><p>最有用的 ls 选项包括</p><ul><li>-l : 以长格式显示结果，显示每个文件和目录的权限、所有权、大小和修改日期等额外详细信息。</li><li>-a : 除非隐藏项目外，显示以.开头的隐藏文件和目录。</li><li>-R : 递归列出所有子目录内容，无限递归到子文件夹。</li><li>-S : 按文件大小排序，最大的优先。</li><li>-t : 按时间戳排序，最新的排在前面。</li></ul><h3 id="cd-–-更改目录"><a href="#cd-–-更改目录" class="headerlink" title="cd – 更改目录"></a>cd – 更改目录</h3><p> <code>cd</code> 命令与 <code>ls</code> 都非常流行。它指的是“更改目录”，顾名思义，它会将您切换到您试图访问的目录。</p><p>当你单独运行 <code>cd</code> 命令时，它会返回到主目录。您也可以通过特定路径进行更改。例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local  <span class="hljs-comment"># 更改到 /usr/local 目录。</span><br><span class="hljs-built_in">cd</span> ..          <span class="hljs-comment"># 上移一级至父级目录。</span><br><span class="hljs-built_in">cd</span> ~/pictures  <span class="hljs-comment"># 切换到主目录中的 pictures 文件夹。</span><br></code></pre></td></tr></table></figure><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> [directory]<br></code></pre></td></tr></table></figure><p>例如，如果您在 <code>Documents</code> 目录中，并且试图访问其名为 <code>Videos</code> 的子文件夹之一，则可以通过键入以下内容来输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> Videos<br></code></pre></td></tr></table></figure><p>您还可以提供文件夹的绝对路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/wbolt/Documents/Videos<br></code></pre></td></tr></table></figure><p>在使用 <code>cd</code> 命令时，有一些技巧可以为您节省大量时间：</p><ol><li><p>进入home文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span><br></code></pre></td></tr></table></figure></li><li><p>向上移动一个级别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ..<br></code></pre></td></tr></table></figure></li><li><p>返回上一个目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> -<br></code></pre></td></tr></table></figure></li></ol><h3 id="mkdir-–-创建新目录"><a href="#mkdir-–-创建新目录" class="headerlink" title="mkdir – 创建新目录"></a>mkdir – 创建新目录</h3><p>要在shell中创建文件夹，可以使用mkdir命令。只需指定新文件夹的名称，确保它不存在，然后就可以开始了。</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> [options] &lt;directory&gt;<br></code></pre></td></tr></table></figure><p>这将在当前工作目录下创建一个名为 <code>newproject</code> 的目录。</p><p>一些有用的 <code>mkdir</code> 选项：</p><ul><li>-p : 根据需要递归创建父目录。</li><li>-v : 显示已创建目录的详细输出。<br>例如，要创建一个保存所有图像的目录，只需键入：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> images/<br></code></pre></td></tr></table></figure><p>要使用简单命令创建子目录，请使用parent（-p）标志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p movies/2004/<br></code></pre></td></tr></table></figure><h3 id="cp-–-复制文件和目录"><a href="#cp-–-复制文件和目录" class="headerlink" title="cp – 复制文件和目录"></a>cp – 复制文件和目录</h3><p>直接在Linux终端上复制文件和文件夹非常容易，有时它可以取代传统的文件管理器。</p><p>语法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> [options] <span class="hljs-built_in">source</span> destination<br></code></pre></td></tr></table></figure><p>一些有用的 cp 选项：</p><ul><li>-r – 以递归方式复制目录，向下复制到子目录，同时复制其内容。复制目录时必须使用。</li><li>-i – 在覆盖目的地的任何现有文件前提示。它可以防止意外覆盖数据。</li><li>-v – 在复制过程中显示每个文件的详细内容。有助于确认到底复制了什么。<br>要使用cp命令，只需将其与源文件和目标文件一起键入即可：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> file_to_copy.txt new_file.txt<br></code></pre></td></tr></table></figure>还可以使用递归标志复制整个目录：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -r dir_to_copy/ new_copy_dir/<br></code></pre></td></tr></table></figure><strong>请记住</strong>，在Linux中，文件夹以正斜杠 (&#x2F;)结尾。</li></ul><h2 id="进阶命令"><a href="#进阶命令" class="headerlink" title="进阶命令"></a>进阶命令</h2><h3 id="ldd-查看可执行文件的链接状态"><a href="#ldd-查看可执行文件的链接状态" class="headerlink" title="ldd 查看可执行文件的链接状态"></a>ldd 查看可执行文件的链接状态</h3><p>假设有一个 <code>main</code> 的可执行文件(在 <code>main.exe</code> )</p><p>使用 <code>ldd main</code> 可以查看该 <code>main</code> 可执行文件所链接的动态库 </p>]]></content>
    
    
    <summary type="html">Linux 的核心重点从来都不是它的用户界面。它的设计初衷是让你通过命令行完全控制操作系统。这可能会让 Linux 初学者望而生畏–而成千上万的可用命令只会让这一切变得更加困难。</summary>
    
    
    
    <category term="Linux" scheme="https://camill.love/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://camill.love/tags/Linux/"/>
    
    <category term="bash" scheme="https://camill.love/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>前端网页修改实现记录</title>
    <link href="https://camill.love/getting-started/change-theme/"/>
    <id>https://camill.love/getting-started/change-theme/</id>
    <published>2024-01-14T02:31:24.000Z</published>
    <updated>2024-01-17T13:42:25.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="魔改实现记录"><a href="#魔改实现记录" class="headerlink" title="魔改实现记录"></a>魔改实现记录</h1><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><p><a href="https://asteri5m.gitee.io/archives/Fluid%E9%AD%94%E6%94%B9%E7%AC%94%E8%AE%B0.html">Butterfly博客魔改记录</a><br><a href="https://emoryhuang.cn/blog/1729600336.html">添加样式教程1</a><br><a href="https://cnhuazhu.gitee.io/2021/03/28/Hexo%E9%AD%94%E6%94%B9/Hexo%E9%AD%94%E6%94%B9%E8%AE%B0%E5%BD%95/">添加样式教程2</a><br><a href="https://blog.kevinchu.top/2023/07/17/hexo-theme-fluid-modify/#5-%E5%AF%BC%E8%88%AA%E6%A0%8F%E6%A0%87%E9%A2%98%E6%B7%BB%E5%8A%A0%E9%9C%93%E8%99%B9%E7%81%AF%E7%89%B9%E6%95%88">基于Fluid主题的Hexo博客修改指南</a><br><a href="https://qingshaner.com/">hexo fluid魔改记录</a></p><h2 id="以下是修改后代码块的样式"><a href="#以下是修改后代码块的样式" class="headerlink" title="以下是修改后代码块的样式"></a>以下是修改后代码块的样式</h2><h3 id="Hello-World-C"><a href="#Hello-World-C" class="headerlink" title="Hello World C++"></a>Hello World C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Hello-World-Python"><a href="#Hello-World-Python" class="headerlink" title="Hello World Python"></a>Hello World Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Hello-World-Java"><a href="#Hello-World-Java" class="headerlink" title="Hello World Java"></a>Hello World Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Hello-World-Go"><a href="#Hello-World-Go" class="headerlink" title="Hello World Go"></a>Hello World Go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Hello-World-JavaScript"><a href="#Hello-World-JavaScript" class="headerlink" title="Hello World JavaScript"></a>Hello World JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">记录如何对Hexo框架，以及Fluid主题中前端界面的修改</summary>
    
    
    
    <category term="快速上手" scheme="https://camill.love/categories/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    
    
    <category term="Hexo" scheme="https://camill.love/tags/Hexo/"/>
    
    <category term="Fluid" scheme="https://camill.love/tags/Fluid/"/>
    
    <category term="部署" scheme="https://camill.love/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo框架快速上手</title>
    <link href="https://camill.love/getting-started/hello-hexo/"/>
    <id>https://camill.love/getting-started/hello-hexo/</id>
    <published>2024-01-14T02:31:24.000Z</published>
    <updated>2024-01-17T13:42:25.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo框架使用说明"><a href="#Hexo框架使用说明" class="headerlink" title="Hexo框架使用说明"></a>Hexo框架使用说明</h1><h2 id="使用淘宝镜像源加速-NPM"><a href="#使用淘宝镜像源加速-NPM" class="headerlink" title="使用淘宝镜像源加速 NPM"></a>使用淘宝镜像源加速 NPM</h2><p><code>npm config set registry https://registry.npmmirror.com</code></p><p>参考：<a href="https://blog.csdn.net/qq_43940789/article/details/131449710">https://blog.csdn.net/qq_43940789/article/details/131449710</a></p><h2 id="使用-npm-一键安装-Hexo-博客程序"><a href="#使用-npm-一键安装-Hexo-博客程序" class="headerlink" title="使用 npm 一键安装 Hexo 博客程序"></a>使用 npm 一键安装 Hexo 博客程序</h2><p><code>npm install -g hexo-cli</code></p><p>参考：<a href="https://zhuanlan.zhihu.com/p/60578464">https://zhuanlan.zhihu.com/p/60578464</a></p><h2 id="初始化并安装所需组件"><a href="#初始化并安装所需组件" class="headerlink" title="初始化并安装所需组件"></a>初始化并安装所需组件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init      <span class="hljs-comment"># 初始化</span><br>npm install    <span class="hljs-comment"># 安装组件</span><br></code></pre></td></tr></table></figure><h2 id="完成后依次输入下面命令，启动本地服务器进行预览"><a href="#完成后依次输入下面命令，启动本地服务器进行预览" class="headerlink" title="完成后依次输入下面命令，启动本地服务器进行预览"></a>完成后依次输入下面命令，启动本地服务器进行预览</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g   <span class="hljs-comment"># 生成页面</span><br>hexo s   <span class="hljs-comment"># 启动预览</span><br></code></pre></td></tr></table></figure><p>访问 <code>http://localhost:4000</code>，出现页面，本地博客安装成功！</p><h2 id="部署-Hexo-到网站"><a href="#部署-Hexo-到网站" class="headerlink" title="部署 Hexo 到网站"></a>部署 Hexo 到网站</h2><p>参考：<a href="https://blog.csdn.net/qingmuzhang/article/details/119906728">https://blog.csdn.net/qingmuzhang/article/details/119906728</a></p><p>安装 hexo-deployer-git：</p><p><code>npm install hexo-deployer-git --save</code></p><p><code>hexo d</code> 部署</p><h2 id="需要安装的一些依赖"><a href="#需要安装的一些依赖" class="headerlink" title="需要安装的一些依赖"></a>需要安装的一些依赖</h2><h3 id="为文章添加目录-现弃用，有bug"><a href="#为文章添加目录-现弃用，有bug" class="headerlink" title="为文章添加目录(现弃用，有bug)"></a>为文章添加目录(现弃用，有bug)</h3><p>参考<a href="https://cloud.tencent.com/developer/article/2065866">为文章添加目录</a></p><ol><li>安装插件</li></ol><p><code>npm install hexo-toc --save</code></p><ol start="2"><li>配置博客根目录下的_config.yml文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">toc:</span><br>  <span class="hljs-attr">maxdepth:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><ol start="4"><li>添加目录</li></ol><p>在需要展示目录的地方添加：</p><p><code>&lt;!-- toc --&gt;</code></p><h2 id="一键开发"><a href="#一键开发" class="headerlink" title="一键开发"></a>一键开发</h2><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p><h2 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h2><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><h2 id="以下是建站之后，Hexo的默认提供的快速使用"><a href="#以下是建站之后，Hexo的默认提供的快速使用" class="headerlink" title="以下是建站之后，Hexo的默认提供的快速使用"></a>以下是建站之后，Hexo的默认提供的快速使用</h2><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">快速搭建一个基于Hexo和Fluid的主题博客</summary>
    
    
    
    <category term="快速上手" scheme="https://camill.love/categories/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    
    
    <category term="Hexo" scheme="https://camill.love/tags/Hexo/"/>
    
    <category term="Fluid" scheme="https://camill.love/tags/Fluid/"/>
    
    <category term="部署" scheme="https://camill.love/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
</feed>
